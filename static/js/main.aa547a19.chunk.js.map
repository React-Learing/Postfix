{"version":3,"sources":["tools/stack.js","tools/trsPostfix.js","component/postfix.js","App.js","serviceWorker.js","index.js"],"names":["items","Stack","this","element","push","pop","length","toString","priority","el","toPostfix","infix","stack","postfix","forEach","indexOf","isEmpty","peek","postfixCal","cal","last","Number","penultimate","container","marginTop","note","color","Postfix","props","inputChange","e","formula","target","value","split","setState","inputTexT","transPost","state","number","join","style","onChange","type","onClick","isNaN","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAAMA,EAAQ,GAEOC,E,WACnB,aAAe,oBACbC,KAAKF,GAAS,G,iDAGXG,GACHD,KAAKF,GAAOI,KAAKD,K,4BAIjB,OAAOD,KAAKF,GAAOK,Q,6BAInB,OAAOH,KAAKF,GAAOE,KAAKF,GAAOM,OAAS,K,gCAIxC,OAA8B,IAAvBJ,KAAKF,GAAOM,S,iCAInB,OAAOJ,KAAKF,GAAOO,e,KCtBjBC,EAAW,SAACC,GAChB,MAAW,MAAPA,GAAqB,MAAPA,EACT,EACI,MAAPA,GAAqB,MAAPA,EACX,EACA,GAGEC,EAAY,SAAmBC,GAC1C,IAAMC,EAAQ,IAAIX,EACZY,EAAU,GAgBhB,IAdAF,EAAMG,QAAQ,SAACL,GACb,IAA4B,IAAxB,OAAOM,QAAQN,GACjBI,EAAQT,KAAKK,OACR,CACL,MAAQG,EAAMI,WACVR,EAASC,IAAOD,EAASI,EAAMK,SAEjCJ,EAAQT,KAAKQ,EAAMP,OAGrBO,EAAMR,KAAKK,OAIPG,EAAMI,WACZH,EAAQT,KAAKQ,EAAMP,OAErB,OAAOQ,GAIIK,EAAa,SAAoBL,GAC5C,IAAMD,EAAQ,IAAIX,EAoClB,OAlCgBY,EAERC,QAAQ,SAACL,GACf,IAA4B,IAAxB,OAAOM,QAAQN,GACjBG,EAAMR,KAAKK,OACN,CACL,IAEIU,EAFEC,EAAOC,OAAOT,EAAMP,OACpBiB,EAAcD,OAAOT,EAAMP,OAGjC,OAAQI,GACN,IAAK,IACHU,EAAMC,EAAOE,EACbV,EAAMR,KAAKe,GACX,MACF,IAAK,IACHA,EAAMG,EAAcF,EACpBR,EAAMR,KAAKe,GACX,MACF,IAAK,IACHA,EAAMC,EAAOE,EACbV,EAAMR,KAAKe,GACX,MACF,IAAK,IACHA,EAAMG,EAAcF,EACpBR,EAAMR,KAAKe,OASZE,OAAOT,EAAML,aCrEhBgB,EAAY,CAChBC,UAAW,QAGPC,EAAO,CACXC,MAAO,WA8DMC,E,YA1Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRC,YAAc,SAACC,GAAO,IAEdC,EADYD,EAAEE,OAAZC,MACcC,MAAM,IAC5B,EAAKC,SAAS,CACZC,UAAWL,KAbI,EAiBnBM,UAAY,WAAO,IACTD,EAAc,EAAKE,MAAnBF,UACFvB,EAAUH,EAAU0B,GACpBG,EAASrB,EAAWL,GAE1B,EAAKsB,SAAS,CACZtB,QAASA,EAAQ2B,KAAK,IACtBD,YAtBF,EAAKD,MAAQ,CACXF,UAAW,KACXvB,QAAS,KACT0B,OAAQ,MALO,E,sEA6BT,IAAD,EACqBrC,KAAKoC,MAAzBzB,EADD,EACCA,QAAS0B,EADV,EACUA,OACjB,OACE,yBAAKE,MAAOlB,GACV,yDAEE,yBAAKkB,MAAOhB,GAAZ,4CAEF,2BAAOiB,SAAUxC,KAAK2B,cACtB,6BACE,4BAAQc,KAAK,SAASC,QAAS1C,KAAKmC,WAApC,kBAEF,wDAEG,IACAxB,EACA,IACD,6BALF,qBAOG,IAECQ,OAAOwB,MAAMN,GAAqB,OAAXA,EAAkB,KAAO,2BAASA,Q,GAnD/CO,IAAMC,WCCbC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.aa547a19.chunk.js","sourcesContent":["const items = [];\n\nexport default class Stack {\n  constructor() {\n    this[items] = [];\n  }\n\n  push(element) {\n    this[items].push(element);\n  }\n\n  pop() {\n    return this[items].pop();\n  }\n\n  peek() {\n    return this[items][this[items].length - 1];\n  }\n\n  isEmpty() {\n    return this[items].length === 0;\n  }\n\n  toString() {\n    return this[items].toString();\n  }\n}\n","import Stack from './stack';\n\nconst priority = (el) => {\n  if (el === '+' || el === '-') {\n    return 1;\n  } if (el === 'x' || el === '/') {\n    return 2;\n  } return 0;\n};\n\nexport const toPostfix = function toPostfix(infix) {\n  const stack = new Stack();\n  const postfix = [];\n\n  infix.forEach((el) => {\n    if ('+-x/'.indexOf(el) === -1) {\n      postfix.push(el);\n    } else {\n      while (!stack.isEmpty()\n       && priority(el) <= priority(stack.peek())\n      ) {\n        postfix.push(stack.pop());\n      }\n\n      stack.push(el);\n    }\n  });\n\n  while (!stack.isEmpty()) {\n    postfix.push(stack.pop());\n  }\n  return postfix;\n};\n\n\nexport const postfixCal = function postfixCal(postfix) {\n  const stack = new Stack();\n\n  const formula = postfix;\n\n  formula.forEach((el) => {\n    if ('+-x/'.indexOf(el) === -1) {\n      stack.push(el);\n    } else {\n      const last = Number(stack.pop());\n      const penultimate = Number(stack.pop());\n      let cal;\n\n      switch (el) {\n        case '+':\n          cal = last + penultimate;\n          stack.push(cal);\n          break;\n        case '-':\n          cal = penultimate - last;\n          stack.push(cal);\n          break;\n        case 'x':\n          cal = last * penultimate;\n          stack.push(cal);\n          break;\n        case '/':\n          cal = penultimate / last;\n          stack.push(cal);\n          break;\n\n        default:\n          break;\n      }\n    }\n  });\n\n  return Number(stack.toString());\n};\n\n\nexport default {\n  toPostfix,\n  postfixCal,\n};\n","import React from 'react';\nimport { toPostfix, postfixCal } from '../tools/trsPostfix';\n\nconst container = {\n  marginTop: '40px',\n};\n\nconst note = {\n  color: '#adadad',\n};\n\nclass Postfix extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputTexT: null,\n      postfix: null,\n      number: null,\n    };\n  }\n\n  inputChange = (e) => {\n    const { value } = e.target;\n    const formula = value.split('');\n    this.setState({\n      inputTexT: formula,\n    });\n  }\n\n  transPost = () => {\n    const { inputTexT } = this.state;\n    const postfix = toPostfix(inputTexT);\n    const number = postfixCal(postfix);\n\n    this.setState({\n      postfix: postfix.join(''),\n      number,\n    });\n  }\n\n\n  render() {\n    const { postfix, number } = this.state;\n    return (\n      <div style={container}>\n        <div>\n                輸入算式:\n          <div style={note}> 符號：+,-,x,/  ex:1+3x6/2 </div>\n        </div>\n        <input onChange={this.inputChange} />\n        <div>\n          <button type=\"button\" onClick={this.transPost}> 轉換</button>\n        </div>\n        <div>\n            後序式：\n          {' '}\n          {postfix}\n          {' '}\n          <br />\n            結果：\n          {' '}\n          {/* eslint-disable no-nested-ternary */}\n          { Number.isNaN(number) ? number === null ? null : '輸入錯誤' : number}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default Postfix;\n","import React from 'react';\nimport './App.css';\nimport Postfix from './component/postfix';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Postfix />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}